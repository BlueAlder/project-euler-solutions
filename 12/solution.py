#!/usr/bin/env python3

import math

# Challenge 12

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28

#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

def main():
  amount_of_divisors = 500

  current_number = 0
  index = 1
  while True:
    current_number += index
    # find factors of current number
    factors = getFactors(current_number)
    if len(factors) > amount_of_divisors:
      break
    index += 1

  print(current_number)

def getFactors(number):
  upper_bound = math.sqrt(number)
  upper_bound = math.ceil(upper_bound) + 1

  factors = set()
  for i in range(1, upper_bound):
    if number % i == 0:
      factors.add(i)
      factors.add(number / i)
  return factors

if __name__ == "__main__":
  main()

